/**
 * 
 */
package com.vaderetrosecure.keystore.dao;

/**
 * Represent an AES secret key with its initialization vector.
 * Fields are arrays of bytes to ease the storage. This class is a locked version of 
 * the {@link com.vaderetrosecure.keystore.dao.KeyProtection} class. It means that the 
 * {@code cipheredKey} field is eventually ciphered with a public key from the 
 * {@link com.vaderetrosecure.keystore.VRKeyStoreSpi}. Only this class will be used 
 * for storage by the {@link com.vaderetrosecure.keystore.dao.KeyStoreDAO} class.
 * 
 * @author ahonore
 * @see com.vaderetrosecure.keystore.VRKeyStoreSpi
 * @see com.vaderetrosecure.keystore.dao.KeyProtection
 * @see com.vaderetrosecure.keystore.dao.KeyStoreDAO
 */
public class LockedKeyProtection
{
    private byte[] cipheredKey;
    private byte[] iv;
    
    /**
     * Construct a new LockedKeyProtection with empty fields.
     */
    public LockedKeyProtection()
    {
        this(new byte[]{}, new byte[]{});
    }
    
    /**
     * Construct a new LockedKeyProtection, given {@code cipheredKey} and {@code iv} parameters.
     * 
     * @param cipheredKey an array of bytes as an eventually ciphered key.
     * @param iv the initialization vector used in the AES ciphering algorithm.
     */
    public LockedKeyProtection(byte[] cipheredKey, byte[] iv)
    {
        this.cipheredKey = cipheredKey;
        this.iv = iv;
    }

    /**
     * Give the eventually ciphered key.
     * 
     * @return an array of bytes representing the eventually ciphered key.
     */
    public byte[] getCipheredKey()
    {
        return cipheredKey;
    }

    /**
     * Define the eventually ciphered key as an array of bytes.
     * Using this method with arrays not generated by a {@code KeyProtection} class
     * is strongly discouraged.
     * 
     * @param cipheredKey an array of bytes representing the eventually ciphered key.
     * @see com.vaderetrosecure.keystore.dao.KeyProtection
     */
    public void setCipheredKey(byte[] cipheredKey)
    {
        this.cipheredKey = cipheredKey;
    }

    /**
     * Give the initialization vector used in the ciphering algorithm.
     * 
     * @return an array of byte containing the initialization vector.
     */
    public byte[] getIV()
    {
        return iv;
    }

    /**
     * Define the initialization vector used in the ciphering algorithm.
     * Using this method with arrays not generated by a {@code KeyProtection} class
     * is strongly discouraged.
     * 
     * @param iv an array of byte containing the initialization vector.
     * @see com.vaderetrosecure.keystore.dao.KeyProtection
     */
    public void setIV(byte[] iv)
    {
        this.iv = iv;
    }
}
